[["index.html", "Charting Annual Emissions 1 Introduction", " Charting Annual Emissions David Holstius 2020-10-20 1 Introduction After working through the material in this cookbook, you will understand how to chart: annual emission estimates, like those in BY or RY data; annual growth factors, normalized to any year; annual throughputs; annual emission factors; and annualized control factors. To demonstrate, we’ll use some data from the BY2011 package. Everything will work in exactly the same way with RY, PY, or BY2015 data. "],["02-setup.html", "2 Setup 2.1 Loading required libraries 2.2 Peeking at data", " 2 Setup 2.1 Loading required libraries Our first step is to load the inventory and BY2011 packages. library(inventory) library(BY2011) Wait for it — inventory imports a lot of stuff! You will see a lot of red message text scroll by. 2.2 Peeking at data BY2011_annual_emission_data is tabular data supplied by the BY2011 package. Since we invoked library(BY2011), we have access to it. Here is what it looks like. head(BY2011_annual_emission_data) Table 2.1: First six rows of BY2011_annual_emission_data. year cnty_abbr cat_id pol_abbr ems_qty ems_unit CY1990 ALA 23 PM10 6.311385 ton/yr CY1990 ALA 23 PM2.5 6.241259 ton/yr CY1990 ALA 23 ROG 82.422747 ton/yr CY1990 ALA 23 TOG 87.219838 ton/yr CY1990 ALA 23 TSP 7.012650 ton/yr CY1990 ALA 24 CO2 3.652422 ton/yr "],["03-emissions.html", "3 Emissions 3.1 Key functions 3.2 Charting annual emissions 3.3 Coloring by category 3.4 Flagging specific values 3.5 Humanizing category names 3.6 Titling and captioning 3.7 Making an area chart 3.8 More than one pollutant", " 3 Emissions This chapter will show you how to create charts showing annual emissions for one or more categories and one or more pollutants. It will also show you how to customize those charts with: a unique color for each category; directly labeled values at specific years; and reader-friendly names for categories. Finally, it will show you how to create area charts, consistent with all of the above. All of what you learn will be extensible to the chapters on Throughputs, Growth Profiles, Emission Factors, and Control Factors. 3.1 Key functions This section relies on three key functions: filter_categories() filter_pollutants() chart_annual_emissions_by() If you have read the vignette Introduction to BY Data1 then you are already familiar with filter_categories() and filter_pollutants(). The chart_annual_emissions_by() function — and its shorter form, chart_annual_emissions() — will be the foundation of this section. To learn more about chart_annual_emissions_by(), you can always type help(\"chart_annual_emissions_by\"). 3.2 Charting annual emissions Let’s try it out on a relatively simple case: charting NOx emissions from BY2011 category #283 Water Heating. # # This is an absolutely minimal example for `chart_annual_emissions()`. # We&#39;re going to build on it, adding improvements as we go. # BY2011_annual_emission_data %&gt;% filter_categories( 283) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_emissions() That’s a great first step! 3.3 Coloring by category If you want to chart more than one category, you’ll probably want a way to distinguish them visually. Let’s use color to distinguish (and compare) #283 Water Heating and #284 Space Heating. # # Here we&#39;ll color by `category`. You could also color by `cnty_abbr`. (Try it!) # # By default, `filter_categories()` adds a new column `category`. If you don&#39;t # name the categories --- which we will do, further along --- then they are # simply prefixed with &quot;#&quot;. So, for example, when `cat_id` is 283, the default # for `category` will be &quot;#283&quot;. # # The suffix `_by()` --- on `chart_annual_emissions_by()` --- is mostly just # there for readability. Things should still work if you forget and use # `chart_annual_emissions()` instead. # BY2011_annual_emission_data %&gt;% filter_categories( 283, 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_emissions_by( color = category) The default colors are provided by scale_color_tableau(). You can try using a different color scheme if you like. Go to the “Help” pane in RStudio, and type “scale_color_”, then wait. You should see a list of choices pop up. If you wind up with more than ten colors, rethink the chart. Maybe grouping categories would be helpful? In later sections, we will learn how. 3.4 Flagging specific values Displaying exact values on a chart can be helpful to the reader. Then, they don’t have to consult a separate table. To do this, simply supply flag_years. If you want to change the template for what exactly is displayed — digits, text, etc. — you can supply flag_labels too. See the Appendix. # # Use `flag_years` to display values directly in the chart. # BY2011_annual_emission_data %&gt;% filter_categories( 283, 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_emissions_by( color = category, flag_years = CY(1993, 2011, 2030)) 3.5 Humanizing category names You can also, in the process of filtering, supply more human-readable names for the categories. # # Names supplied to `filter_categories()` appear in the data as a new column, # `category`. Following that, we can ask `chart_annual_emissions_by()` to use # `category` as the basis for coloring. # BY2011_annual_emission_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_emissions_by( color = category, flag_years = CY(1993, 2011, 2030)) 3.6 Titling and captioning Last but not least, you can provide a title, subtitle, and/or caption. # # An explicit `title`, `subtitle`, and/or `caption` can be supplied to # `chart_annual_emissions_by()`. This is strongly encouraged!! # # The default caption is just &quot;DRAFT YYYY-mm-dd.&quot; # BY2011_annual_emission_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_emissions_by( color = category, flag_years = CY(1993, 2011, 2030), title = &quot;Residential NG Combustion: Space and Water Heating&quot;, subtitle = &quot;Between CY1993-2002, controls on NOx from water heating were strengthened.&quot;) 3.7 Making an area chart Stacking can be a good way to show how the total and the proportions vary over time. (Compare with the line-charts above, which are not stacked.) To create a stacked (“area”) chart, simply pass fill = ... instead of color = .... # # `fill` can be supplied in place of `color`. # # `subtitle = str_c(..., sep = &quot;\\n&quot;)` means &quot;combine multiple lines of text&quot;. # We can use this to avoid subtitles running off the chart. # BY2011_annual_emission_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_emissions_by( fill = category, title = &quot;Residential NG Combustion: Space and Water Heating&quot;, subtitle = str_c( &quot;Combined emissions from water and space heating have declined.&quot;, &quot;But, they are projected to return to 1990 levels by 2030.&quot;, sep = &quot;\\n&quot;)) 3.8 More than one pollutant Above, we’ve kept things simple by just focusing on NOx. But you’ll often want to show more than one pollutant at the same time. You can definitely do that! # # If multiple pollutants are represented in the data that is passed to # `chart_annual_emissions_by()`, it will try to be helpful by creating a # sub-plot for each pollutant. This ought to be a safe approach. # BY2011_annual_emission_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;, &quot;PM10&quot;) %&gt;% chart_annual_emissions_by( color = category, title = &quot;Residential NG Combustion: Space and Water Heating&quot;, subtitle = &quot;Between CY1993-2002, controls on NOx from water heating were strengthened.&quot;) This is being migrated from an R vignette to a GitBook like this one. Stay tuned!↩︎ "],["04-throughputs.html", "4 Throughputs 4.1 Obtaining throughput data 4.2 Charting annual throughputs", " 4 Throughputs This chapter is very similar to the previous chapter (“Emissions”). If you haven’t read that one yet, it would probably be a good idea to read it first! The first section in this chapter, Obtaining throughput data (below), is a bit of a digression. If you like, you can just skip ahead to Charting annual throughputs. 4.1 Obtaining throughput data In the Emissions chapter, we had a nice “published” dataset ready at hand: BY2011_annual_emission_data. Unfortunately, there are no analogously “published” area-source throughputs for BY2011. However, we can fairly easily (re-)produce CY1990-2030 area-source estimates from the information contained in the BY2011 DataBank t-tables. Then, we can extract throughputs from those. That’s what we’ll do in the subsections below. Again, this is a bit of a digression — you can just skip ahead to Charting annual throughputs and come back to this later, if you like. 4.1.1 Recreating BY2011 area-source projections In the chunk of code below, we recreate the entire BY2011 area-source inventory, from CY1990 through CY2040. (It’s actually pretty fast.) # # Step 1: `BY_area_source_projections()` recreates an entire inventory. For # each category, it assembles `tput_qty`, `ef_qty`, and `cf_qty`, and then # calculates `ems_qty` from those. # # It can also do much more --- see `help(&quot;BY_area_source_projections&quot;)` to learn # how you can &quot;swap in&quot; alternative throughputs, emission factors, etc. # # **NOTE:** For BY2011, in some cases, the calculated emission estimates may # differ from the published emission estimates. See the Appendix for an # explanation and a specific example. # BY2011_area_source_projection_data &lt;- BY(2011) %&gt;% BY_area_source_projections( years = CY(1990:2030), verbose = TRUE) head(BY2011_area_source_projection_data) year cat_id cnty_abbr tput_qty tput_unit pol_id pol_abbr ef_qty ef_unit cf_qty ems_qty ems_unit CY1990 1576 CC 1727880 1000 CUBIC FT 990 TOG 0.134 lb/tput 0.28 32.41502 tons/yr CY1990 1576 CC 1727880 1000 CUBIC FT 6970 CH4 0.030 lb/tput 1.00 25.91819 tons/yr CY1991 1576 CC 3277889 1000 CUBIC FT 990 TOG 0.134 lb/tput 0.28 61.49320 tons/yr CY1991 1576 CC 3277889 1000 CUBIC FT 6970 CH4 0.030 lb/tput 1.00 49.16833 tons/yr CY1992 1576 CC 3138134 1000 CUBIC FT 990 TOG 0.134 lb/tput 0.28 58.87140 tons/yr CY1992 1576 CC 3138134 1000 CUBIC FT 6970 CH4 0.030 lb/tput 1.00 47.07201 tons/yr The resulting BY2011_area_source_projection_data now contains columns for: ems_qty and ems_unit (emissions); ef_qty (emission factors); cf_qty (uncontrolled fractions); and tput_qty and tput_unit (throughputs). 4.1.2 De-duplicating recreated BY2011 throughputs Next, we derive BY2011_area_source_throughput_data from BY2011_area_source_projection_data. The fact that BY2011_area_source_projection_data contains tput_qty and tput_unit makes it almost suitable for use with chart_annual_throughputs_by(). But, BY2011_area_source_projection_data is in long (“tidy”) format, suitable for use with chart_annual_emissions_by(). This means that the values in the tput_qty column are repeated once per pollutant. If we just added them up, we’d end up with a big over-estimate. We’ll use distinct() to solve the problem. # # We can use `distinct()` to de-duplicate throughputs. # BY2011_area_source_throughput_data &lt;- BY2011_area_source_projection_data %&gt;% distinct( year, cat_id, cnty_abbr, tput_qty, tput_unit) Now we have a clean BY2011_area_source_throughput_data. Again, if you’re reading in throughput data from a .CSV or .XLSX file, you won’t have to worry at all about the steps above. Just skip ahead to the next section! 4.2 Charting annual throughputs Let’s examine a category where the growth in throughput varies by county over time. A good example is category #761 Sanitary Sewers. # # Even though the relevant throughputs appear twice in these data --- once for # `ROG` rows, and once for `CH4` --- `chart_annual_throughputs_by()` tries not # to double-count. See `help(&quot;chart_annual_throughputs_by&quot;)` for details. # BY2011_area_source_projection_data %&gt;% filter_categories( &quot;#761 Sanitary Sewers&quot; = 761) %&gt;% chart_annual_throughputs_by( flag_years = CY(2011), color = cnty_abbr, title = &quot;Sanitary Sewers&quot;, subtitle = str_c( &quot;Sanitary sewers (category #761) tracks with household population.&quot;, &quot;The relevant growth profile (#657, in DataBank) also varies by county.&quot;, sep = &quot;\\n&quot;)) As you can see, the syntax for chart_annual_throughputs_by() is identical to that for chart_annual_emissions_by(). Above, we’ve colored by cnty_abbr, rather than cat_id. This often makes sense when working with throughput data, since different categories often are estimated in terms of different throughput units. So, displaying throughputs for different categories on the same scale may not always make sense (although when the units are the same, it does). If you used chart_annual_throughputs() and didn’t supply color = cnty_abbr, you will see the regional totals instead (see below). # # Even though the relevant throughputs appear twice in these data --- once for # `ROG` rows, and once for `CH4` --- `chart_annual_throughputs_by()` tries not # to double-count. See `help(&quot;chart_annual_throughputs_by&quot;)` for details. # BY2011_area_source_projection_data %&gt;% filter_categories( &quot;#761 Sanitary Sewers&quot; = 761) %&gt;% chart_annual_throughputs( flag_years = CY(2011), title = &quot;Sanitary Sewers&quot;, subtitle = str_c( &quot;Sanitary sewers (category #761) tracks with household population.&quot;, &quot;The relevant growth profile (#657, in DataBank) also varies by county.&quot;, sep = &quot;\\n&quot;)) What if we wanted to understand these throughputs in terms of percent change (%), rather than absolute units (“1000 Pounds”)? Let’s move on to the next two chapters, Relative Changes and Growth Profiles. "],["05-growth_profiles.html", "5 Growth Profiles 5.1 Normalized growth factors 5.2 County-specific growth profiles 5.3 Raw growth profile data", " 5 Growth Profiles This chapter shows how to chart growth profiles. In the previous chapter, we saw how to use chart_annual_growth_by() to examine relative changes in estimates of emissions and throughputs. We can also use chart_annual_growth_by() that have already been “normalized”, like growth profiles. This chapter also introduces several new functions: DB_growth_profiles() DB_growth_profile_crosswalk() DB_raw_growth_profiles() chart_annual_quantities_by() We’ll use the ones beginning with DB_ to fetch some growth profile data stored in DataBank. And, we’ll use chart_annual_quantities_by() to plot the raw (non-normalized) numbers behind a specific growth profile. 5.1 Normalized growth factors Let’s start by pulling BY2011 growth factors from DataBank. DB_growth_profiles() takes care of normalizing them, making the assumption that BY2011 should be normalized to CY2011. # # `DB_growth_profiles()` automatically normalizes BY2011 profiles to CY2011. If # you would like them normalized to a different year, just alter the value of # `ref_year`, below. # # `DB_growth_profiles()` also does the work of linking profiles to categories, # consistent with the configuration stored in DataBank for the given base year. # BY2011_growth_profile_data &lt;- BY(2011) %&gt;% DB_growth_profiles( years = CY(1990:2030), verbose = TRUE) With these in hand, we can chart the profile for BY2011 category #283 “Residential Combustion”. We use the same function, chart_annual_growth_by(), that we learned about in the previous chapter. # # Chart the relative growth in these growth factors. # BY2011_growth_profile_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283) %&gt;% chart_annual_growth_by( color = cnty_abbr, verbose = TRUE, base_year = CY(2011), flag_years = CY(1993, 2011, 2030), title = &quot;Residential NG Combustion: Space and Water Heating&quot;, subtitle = str_c( &quot;This is the growth profile associated with category #283 in BY2011.&quot;, &quot;There is a +9% change from CY2011 to CY2030.&quot;, sep = &quot;\\n&quot;)) 5.2 County-specific growth profiles The above profile for natural gas usage doesn’t vary by county, but we can look at one that does. In DataBank, the growth profile associated with BY2011 category #761 “Sanitary Sewers” is a good example. # # Chart the *raw* growth profile data for profile #657 &quot;Household Population&quot;. # Profile #657 was used to project BY2011 category #761 &quot;Sanitary Sewers&quot;. # BY2011_growth_profile_data %&gt;% filter_categories( &quot;#761 Sanitary Sewers&quot; = 761) %&gt;% chart_annual_growth_by( color = cnty_abbr, base_year = CY(2011), title = &quot;Household Population (Growth Profile #657)&quot;, subtitle = &#39;Used to project BY2011 category #761 &quot;Sanitary Sewers&quot;.&#39;) 5.3 Raw growth profile data What if we wanted to chart the un-normalized (“raw”) growth profile data? First, we can pull the raw numbers, using DB_raw_growth_profiles() instead of DB_growth_profiles(). Then, we find the profile associated with a given BY2011 category ID, using DB_growth_profile_crosswalk(). Finally, we can use chart_annual_quantities(), rather than chart_annual_growth(), to plot the numbers. This ensures that the numbers aren’t normalized in the process of creating the chart. 5.3.1 Pulling raw growth profile data Unlike DB_growth_profiles(), DB_raw_growth_profiles() does not normalize anything. It just assembles and returns whatever is contained in t0335, t0336, and t0337. Those numbers might be: already normalized to CY2011; or already normalized to a previous “base year” (like CY2008); or in some natural unit, like “persons” or “acres”. (It varies from profile to profile.) # # By default, `BY2011_raw_growth_profile_data()` returns nested results. # Those are one row per profile, not one row per (profile, year, county). # # Here, we override that with `nested = FALSE`. # BY2011_raw_growth_profile_data &lt;- BY(2011) %&gt;% DB_raw_growth_profiles( nested = FALSE, years = CY(1990:2030), verbose = TRUE) 5.3.2 Finding the profile associated with a BY2011 category ID Let’s look up the growth profile associated with BY2011 category #761 “Sanitary Sewers”. # # Figure out the ID of the growth profile that&#39;s been associated with BY2011 # category #761 &quot;Sanitary Sewers&quot;. # BY(2011) %&gt;% DB_growth_profile_crosswalk( verbose = TRUE) %&gt;% filter_categories( &quot;#761 Sanitary Sewers&quot; = 761) cat_id cat_h0 gpf_id backcast forecast category 761 Area Source 657 TRUE TRUE #761 Sanitary Sewers Above, we can see that the relevant growth profile ID is #657. Now we can look up the metadata associated with it: gpf_name (name), gpf_staff (staff), etc. BY2011_raw_growth_profile_data %&gt;% filter( gpf_id == 657) %&gt;% distinct( gpf_id, gpf_name, gpf_staff, gpf_date) gpf_id gpf_name gpf_staff gpf_date 657 Household Population Minh H Nguyen 2010-02-25 The name associated with this profile turns out to be “Household Population”. It was last updated, according to DataBank, on 2010-02-25. 5.3.3 Charting the un-normalized (“raw”) growth profile data # # Still charting `BY2011_raw_growth_profile_data`, but using # `chart_annual_quantities_by()` instead of `chart_annual_growth_by()`. # # Now we can see the offsets, as well as the slopes, that are in the raw data. # # If we knew their units, we could label the y-axis ... but we don&#39;t. # BY2011_raw_growth_profile_data %&gt;% filter( gpf_id == 657) %&gt;% chart_annual_quantities_by( color = cnty_abbr, flag_years = CY(2011), flag_labels = &quot;{format(gf_qty, big.mark = &#39;,&#39;, digits = 4, trim = TRUE)}&quot;, title = &quot;Household Population (Growth Profile #657)&quot;, subtitle = &#39;Used to project BY2011 category #761 &quot;Sanitary Sewers&quot;.&#39;) 5.3.4 A note on county fractions Why are the above lines offset from each other, even at CY2011? Because we’re plotting the raw growth profile data! (Since this profile is labeled “Household Population”, we might presume that the units are in persons. Without going into further detail, these numbers do seem consistent with Bay Area county populations.) The offsets are interesting — they’re not junk. See the Appendix to learn how to compute county fractions from raw growth profile data. (This is also a good way to double-check county fractions.) "],["06-relative_changes.html", "6 Relative Changes 6.1 Relative changes in emissions 6.2 Relative changes in throughputs", " 6 Relative Changes This chapter shows how to chart relative changes in emissions and/or throughputs. By “relative change” we simply mean the percent change relative to a given year (i.e., the “base year” or “reference year”). We don’t actually need to obtain any growth profile data yet; the function chart_annual_growth_by() will simply normalize whatever we supply it with. In the next chapter, we’ll look at growth profiles more specifically. 6.1 Relative changes in emissions We can easily examine relative growth using chart_annual_growth_by(). It expects the same input as chart_annual_emissions(); the only additional requirement is that you supply a base_year. Here is an example. It’s exactly the same as we saw in the Emissions chapter, except that we’re swapping chart_annual_growth_by() in for chart_annual_emissions_by(). # # The `base_year` can be prefixed with `CY`, `BY`, `RY` or `PY`; # `chart_annual_growth_by()` will ignore the differences. # BY2011_annual_emission_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_growth_by( color = category, base_year = CY(2011)) # required; can be BY or CY We can enhance it in exactly the same ways that we learned in the Emissions chapter, too. Using flag_years can be especially helpful, because then we can read off the exact growth for a given future (or historical) year. BY2011_annual_emission_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_growth_by( color = category, base_year = BY(2011), flag_years = CY(1993, 2002, 2030), title = &quot;Residential NG Combustion: Space and Water Heating&quot;, subtitle = str_c( &quot;NOx emissions from water and space heating are projected to grow by +24% from CY2011 to CY2030.&quot;, &quot;Labeled values are percent changes relative to the base year (CY2011).&quot;, sep = &quot;\\n&quot;)) # combine lines with a newline 6.2 Relative changes in throughputs You can reuse the chunk above to work with throughput data, provided you drop the filter_pollutants(...) clause (two lines). BY2011_area_source_throughput_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% chart_annual_growth_by( color = category, base_year = BY(2011), flag_years = CY(1993, 2002, 2030), title = &quot;Residential NG Combustion: Space and Water Heating&quot;, subtitle = str_c( &quot;Natural gas consumed by water and space heating is projected to grow by +24% from CY2011 to CY2030.&quot;, &quot;Labeled values are percent changes relative to the base year (CY2011).&quot;, sep = &quot;\\n&quot;)) # combine lines with a newline We can also look at the trend in total throughput for these two caegories, instead of splitting them apart. Just omit the color = cat_id, and swap in chart_annual_growth() (without the suffix _by()). BY2011_area_source_throughput_data %&gt;% filter_categories( &quot;#283 Space Heating&quot; = 283, &quot;#284 Water Heating&quot; = 284) %&gt;% chart_annual_growth( base_year = BY(2011), flag_years = CY(1993, 2002, 2030), title = &quot;Residential NG Combustion: Space and Water Heating&quot;, subtitle = str_c( &quot;Natural gas consumed by water and space heating is projected to grow by +24% from CY2011 to CY2030.&quot;, &quot;Labeled values are percent changes relative to the base year (CY2011).&quot;, sep = &quot;\\n&quot;)) # combine lines with a newline If you are trying this, you might notice that the throughput forecast doesn’t follow the same trajectory as the NOx forecast. See the Appendix for an explanation and an advanced exercise. "],["07-emission_factors.html", "7 Emission Factors", " 7 Emission Factors For some categories, emission factors vary over time. A good category to demonstrate this with is #749 “Agricultural Land Preparation”. Here, annualize_DB_emission_factors() does the work of carrying emission factors forward in time. This means that for each value of year, the “most recent” emission factor, as of that year, is stored in ef_qty. BY2011_ag_land_prep_ef_data &lt;- BY(2011) %&gt;% DB_area_source_emission_factors( verbose = TRUE) %&gt;% filter_categories( &quot;#749 Agricultural Land Prep&quot; = 749) %&gt;% annualize_DB_emission_factors( years = CY(1990:2030), verbose = TRUE) In practice, chart_annual_emission_factors_by() is almost exactly identical to chart_annual_emissions_by(). The only real difference is in the default formatting of the values displayed directly in the chart by flag_years. BY2011_ag_land_prep_ef_data %&gt;% chart_annual_emission_factors( flag_years = CY(2011), title = &quot;Agricultural Land Preparation&quot;, subtitle = &quot;Emission factors pulled from DataBank (t1326).&quot;) In DataBank, emission factors are stored in units of “pounds per unit of throughput”. If you change the value of ef_unit (and alter the values in ef_qty accordingly), that will be reflected in the output of chart_annual_emission_factors(). "],["08-control_factors.html", "8 Control Factors 8.1 Example: domestic woodstoves 8.2 Example: gasoline filling stations 8.3 Control effectiveness vs. annualized control factors", " 8 Control Factors This chapter is very similar to the one on Emission factors. Here we employ a function, annualize_DB_control_factors(), that’s analogous to annualize_DB_emission_factors(). There is one notable difference. For a given category, emission factors can vary by quite a bit from pollutant to pollutant. The default behavior for chart_annual_emission_factors_by(), as we saw in the previous chapter, is therefore to generate a different sub-plot for each pollutant, so that the y-scales can vary by pollutant. Control factors, in contrast, always range from 0% to 100%, so we can safely plot them all on the same y-scale. This works well when we set color = pol_abbr, as we do in the examples below. 8.1 Example: domestic woodstoves # # Using `filter_categories()` before `annualize_DB_control_factors()` saves time. # BY2011_woodstove_cf_data &lt;- BY(2011) %&gt;% DB_control_factors( verbose = TRUE) %&gt;% filter_categories( &quot;#288 Domestic Wood Stoves&quot; = 288) %&gt;% annualize_DB_control_factors( years = CY(1990:2030), verbose = TRUE) # # We can see that in CY1990, these emissions were already controlled by a small # amount. By CY2011, controls had increased by quite a bit. # BY2011_woodstove_cf_data %&gt;% filter_pollutants( &quot;CO&quot;, &quot;PM&quot;, &quot;TOG&quot;) %&gt;% chart_annual_control_factors_by( color = pollutant, flag_years = CY(1990, 2011)) 8.2 Example: gasoline filling stations # # Using `filter_categories()` before `annualize_DB_control_factors()` saves time. # BY2011_gasoline_spillage_cf_data &lt;- BY(2011) %&gt;% DB_control_factors( verbose = TRUE) %&gt;% filter_categories( &quot;#66 Gasoline Spillage&quot; = 66) %&gt;% annualize_DB_control_factors( years = CY(1990:2030), verbose = TRUE) # # Again we can see that in CY1990, these emissions were already controlled by a # small amount. And, by CY2011, controls had increased by quite a bit. # BY2011_gasoline_spillage_cf_data %&gt;% filter_pollutants( &quot;TOG&quot;) %&gt;% chart_annual_control_factors_by( color = pollutant, flag_years = CY(1990, 2011)) 8.3 Control effectiveness vs. annualized control factors “Control factors” can mean several different things. Above, we looked at control factors in terms of annualized uncontrolled fractions. Historically, BAAQMD emission inventory staff have estimated both (a) the “maximum effectiveness of” a given regulation, and (b) the real-world “compliance with” said regulation. Sometimes these are tied to mid-year dates, rathen than January 1. Staff have then relied on an algorithm, implemented in DataBank, to transform these into cumulative and annualized control factors. Those underlying “maximum effectiveness” and “compliance” estimates can be inspected by just avoiding the invocation of annualize_DB_control_factors(). Let’s dig a little further into the “gasoline spillage” example above: # # Here we are simply omitting the lines: # # annualize_DB_control_factors( # years = CY(1990:2030), # verbose = TRUE) # # ... in other words, we&#39;re omitting the last step in the pipeline above. # BY(2011) %&gt;% DB_control_factors( verbose = TRUE) %&gt;% filter_categories( &quot;#66 Gasoline Spillage&quot; = 66) cat_id pol_id pol_abbr Cd Ed Ep cf_date cf_desc reg_id reg_abbr reg_name category 66 990 TOG 0.8 0.60 0.0 1981-09-28 No rule is applicable for this category. Add reg. control/rule effect. due to nozzle improvement in Phase II GDF; 80% reg. control. 41 R8.7.302 Gasoline Dispensing Facilities #66 Gasoline Spillage 66 990 TOG 0.8 0.86 0.6 1986-07-26 Nozzle improvement in Phase II GDF reduce the gasoline spillage at vehicles filling stations; 80% reg. control, 86% compliance. 41 R8.7.302 Gasoline Dispensing Facilities #66 Gasoline Spillage 66 990 TOG 0.5 0.50 0.0 2001-04-01 CARB lowering the allowable spillage limit 0.24/1000gal, Module 5 effect. date 41 R8.7.302 Gasoline Dispensing Facilities #66 Gasoline Spillage 66 990 TOG 0.5 0.87 0.5 2004-04-01 CARB lowering the allowable spillage limit 0.24/1000gal, Module 5 operative date 41 R8.7.302 Gasoline Dispensing Facilities #66 Gasoline Spillage See the Appendix for further discussion of DB_control_factors() (and control factors more generally). "],["09-comparing_inventories.html", "9 Comparing Inventories 9.1 Binding inventories together 9.2 Comparing two versions of a single category 9.3 Groups of categories 9.4 More Examples", " 9 Comparing Inventories This chapter is about comparing one inventory to another. You might wish, for example, to see the differences between the BY2011 and BY2008 versions of a single category. Or, you might want to compare groups of related categories. Let’s use #288 Domestic Woodstoves as a simple example of how to do this with a single category. 9.1 Binding inventories together First, we need to gain access to the BY2008 data, via library(BY2008). This is just like we did in Chapter 2, with library(BY2011). library(BY2011) library(BY2008) Now we combine BY2011_annual_emission_data and BY2008_annual_emission_data into a single dataset named BY_data. We do this with bind_inventories(). # # Using `bind_inventories()` creates a new column named `inventory`. # BY_data &lt;- bind_inventories( BY2011 = BY2011_annual_emission_data, BY2008 = BY2008_annual_emission_data) With our new BY_data, we can reuse the same old chart_annual_emissions_by(). 9.2 Comparing two versions of a single category Here we do just two things differently, compared to previous chapters: We specify opacity = inventory. This causes the BY2011 data and the BY2008 data to be drawn with distinct line types (solid and dashed, respectively). We supply c(288, \"A288\") instead of just 288. (See the note below.) In BY2008_annual_emission_data, category IDs are prefixed by either “P” or “A”, and the numeric part of the ID doesn’t have to be unique! This is a convention that is no longer followed, from BY2011 onwards. # # Treat both of the following as &quot;Domestic Wood Stoves&quot;: # # - BY2011 category #288 # - BY2008 category #A288 # chart_data &lt;- BY_data %&gt;% filter_categories( &quot;Domestic Wood Stoves&quot; = c(288, &quot;A288&quot;)) %&gt;% filter_pollutants( &quot;NOx&quot;, &quot;CO&quot;) The c(288, \"A288\") tells filter_categories() to treat either/both of these categories as “Domestic Wood Stoves”. # # Chart by inventory, so we can compare. # chart_data %&gt;% chart_annual_emissions_by( opacity = inventory, flag_years = CY(1990, 2010, 2030), title = &quot;Domestic Woodstoves: BY2011 Updates&quot;, subtitle = str_c( &quot;- CY1990-2005 estimates are about 10% lower.&quot;, &quot;- Estimates circa CY2010 are about 40% lower.&quot;, &quot;- Forecast is flat, rather than increasing.&quot;, sep = &quot;\\n&quot;)) 9.3 Groups of categories What if we want to chart more than just a single category? When groups of related category identifiers change from one year to the next, we can still visualize the data effectively using filter_categories() and chart_annual_emissions(). Here is a concrete example. In BY2008_annual_emission_data, we can see both \"P304\" and \"A304\" in cat_id. Taken together, these comprise estimates of emissions from stationary-source liquid-fueled reciprocating engines. The scope of P304 is limited to permitted sources, and is calculated using a point-source methodology. The scope of A304 comprises any remaining emissions from the same kind of source, and is calculated using an area-source methodology. In BY2011_annual_emission_data, emissions from the same real-world activities are assigned to BY2011 categories #304 (point) and #1578 (area). This can create some confusion. It means that when someone is speaking about “category 304”, they could be referring to BY2011 category #304 (point sources only). Or, if they have BY2008 in mind, they might be speaking about both P304 and A304 together. Comparing totals First, let’s treat all of these “Reciprocating Engines, Liquid Fuel” categories as one big group. And, let’s focus on just one pollutant, to keep things simple. # # Treat all of the following as &quot;Recip Eng, Liquid Fuel&quot;: # # - BY2011 category #304 (point) # - BY2008 category #P304 (point) # - BY2011 category #1578 (area) # - BY2008 category #A304 (area) # chart_data &lt;- BY_data %&gt;% filter_categories( &quot;Recip Eng, Liquid&quot; = c(304, &quot;P304&quot;, 1578, &quot;A304&quot;)) %&gt;% filter_pollutants( &quot;NOx&quot;) # # Chart by inventory, so we can compare the totals. # chart_data %&gt;% chart_annual_emissions_by( opacity = inventory, title = &quot;Reciprocating Engines (Liquid Fuel): BY2011 Updates&quot;, subtitle = str_c( &quot;BY2008 = Categories #P304 (point) and/or #A304 (area).&quot;, &quot;BY2011 = Categories #304 (point) and/or #1578 (area).&quot;, sep = &quot;\\n&quot;)) Comparing subtotals We can see above that, for these categories, there are some considerable differences between BY2011 and BY2008 estimates of NOx emissions. What’s going on? Let’s try grouping the “point” and “area” subsets separately in our call to filter_categories(), and see what happens. We’ll create one group named “Recip Eng, Liquid (point)”, and one group named “Recip Eng, Liquid (area)”. To the former, we’ll assign BY2011 #304 and BY2008 #P304; to the latter, BY2011 #1578 and BY2008 #A304. # # Treat these as &quot;Recip Eng, Liquid Fuel (Point)&quot;: # # - BY2011 category #304 # - BY2008 category #P304 # # ... and treat these as &quot;Recip Eng, Liquid Fuel (Area)&quot;: # # - BY2011 category #1578 # - BY2008 category #A304 # chart_data &lt;- BY_data %&gt;% filter_categories( &quot;Recip Eng, Liquid (point)&quot; = c(304, &quot;P304&quot;), &quot;Recip Eng, Liquid (area)&quot; = c(1578, &quot;A304&quot;)) %&gt;% filter_pollutants( &quot;NOx&quot;) # # Chart by inventory and by point/area, so we can compare the subtotals. # chart_data %&gt;% chart_annual_emissions_by( opacity = inventory, color = category, title = &quot;Reciprocating Engines (Liquid Fuel): BY2011 Updates&quot;, subtitle = str_c( &quot;BY2008 = Categories #P304 (point) and/or #A304 (area).&quot;, &quot;BY2011 = Categories #304 (point) and/or #1578 (area).&quot;, sep = &quot;\\n&quot;)) From this, we can see that the bulk of the difference is due to a much lower estimate for the area-source component. Using filter_categories() and chart_annual_emissions() together is powerful. With it, you can review updates to any related groups of categories from different BY inventories, regardless of how their cat_id identifiers might have changed. 9.4 More Examples Residential Combustion: Distillate Oil (Relative Growth) BY_data %&gt;% filter_categories( &quot;#287 Distillate Oil&quot; = c(287, &quot;A287&quot;)) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_growth_by( opacity = inventory, base_year = CY(2011), flag_years = CY(1990, 2030), title = &quot;Residential Combustion&quot;, subtitle = &quot;#287 Distillate Oil&quot;) Petroleum Refining: Flares and Blowdown Systems BY_data %&gt;% filter_categories( &quot;#15 Flares and Blowdown Systems&quot; = c(15, &quot;P15&quot;)) %&gt;% filter_pollutants( &quot;CO2&quot;) %&gt;% chart_annual_emissions_by( opacity = inventory, base_year = CY(2011), flag_years = CY(1990, 2011, 2030), title = &quot;Petroleum Refining&quot;, subtitle = &quot;#15 Flares and Blowdown Systems&quot;) Small Bakeries # # To remove redundant flags, pass `flag_unique = TRUE`. Notice how the value # &quot;190.3 ton/yr&quot; is now only displayed once at CY1990. Please note: This # behavior may be changed in future updates to `ggtools` --- don&#39;t use it (yet) # in production code. # BY_data %&gt;% filter_categories( &quot;#935 Small Bakeries&quot; = c(935, &quot;A935&quot;)) %&gt;% filter_pollutants( &quot;TOG&quot;) %&gt;% chart_annual_emissions_by( alpha = inventory, base_year = CY(2011), flag_years = CY(1990, 2011, 2030), flag_unique = TRUE, title = &quot;Industrial and Commercial Processes&quot;, subtitle = &quot;#935 Small Bakeries&quot;) "],["10-third_party.html", "10 Third-Party Data 10.1 Natural Gas Consumption", " 10 Third-Party Data You can use the chart_*_by() family of functions with third-party data too. This set of examples pulls from an R library, ECDMS, that contains tidied data harvested from the California Energy Consumption Database (ECDMS). These data, published by the California Energy Commission (CEC), provide estimates of annual natural gas and electricity consumption in California. To gain access, we just type library(ECDMS). library(inventory) library(ECDMS) 10.1 Natural Gas Consumption In the ECDMS_gas_county_data dataset, natural gas consumption data are split by county, sector, and year. This dataset covers all of California, from CY1990 through CY2018. Here’s a preview: head(ECDMS_gas_county_data) year sector county tput_qty tput_unit CY1990 Non-Residential Alameda 229.905609 MMthm CY1990 Non-Residential Amador 11.658194 MMthm CY1990 Non-Residential Butte 17.028776 MMthm CY1990 Non-Residential Calaveras 0.331382 MMthm CY1990 Non-Residential Colusa 11.785811 MMthm CY1990 Non-Residential Contra Costa 701.736398 MMthm What we’re interested in is tput_qty — so chart_annual_throughputs_by() will “just work”. 10.1.1 San Francisco Bay Area (9 Counties) Let’s take SFBA_gas_county_data to be the subset belonging to Alameda, Contra Costa, Marin, Napa, San Francisco, San Mateo, Santa Clara, Solano, and Sonoma counties. # # Note: `DST_COUNTY_NAMES` is supplied by the `inventory` package. # SFBA_gas_county_data &lt;- ECDMS_gas_county_data %&gt;% filter( county %in% names(DST_COUNTY_NAMES)) Now let’s create a set of plots: Throughput, total Relative growth, total Stacked throughputs, by sector Relative growth, by sector Stacked throughputs, by county Relative growth, by county For the relative-growth charts, we’ll specify base_year = CY(2011). SFBA: Total Consumption SFBA_gas_county_data %&gt;% chart_annual_throughputs( flag_years = CY(1990, 2011)) SFBA: Total Growth SFBA_gas_county_data %&gt;% chart_annual_growth( base_year = CY(2011), flag_years = CY(1990)) SFBA: Consumption by Sector SFBA_gas_county_data %&gt;% chart_annual_throughputs_by( fill = sector) SFBA: Growth by Sector SFBA_gas_county_data %&gt;% chart_annual_growth_by( color = sector, base_year = CY(2011), flag_years = CY(1990)) Here we see that, in the nine-county Bay Area, Non-Residential gas consumption has been trending slightly upward over time, at about 0.3% growth per year. Residential consumption, on the other hand, has been trending slightly downward, at about -0.3% per year. SFBA: Consumption by County SFBA_gas_county_data %&gt;% chart_annual_throughputs_by( fill = county) SFBA: Growth by County SFBA_gas_county_data %&gt;% chart_annual_growth_by( color = county, base_year = CY(2011)) 10.1.2 PG&amp;E Planning Area Above, we saw that ECDMS_gas_county_data is split by county. There is a different tabular dataset, ECDMS_gas_plan_data, that is split instead by plan (“planning area”). Let’s take PGE_gas_plan_data to be the subset where plan is “Pacific Gas and Electric”. PGE_gas_plan_data &lt;- ECDMS_gas_plan_data %&gt;% filter( plan == &quot;Pacific Gas and Electric&quot;) Now let’s recreate a similar set of plots: Throughput, total Relative growth, total Stacked throughputs, by sector Relative growth, by sector The total annual consumption is higher in PGE_gas_plan_data — more like 5 billion therms, versus the 3 billion therms we saw in SFBA_gas_county_data. PG&amp;E: Total Consumption PGE_gas_plan_data %&gt;% chart_annual_throughputs( flag_years = CY(1990, 2011)) PG&amp;E: Total Growth PGE_gas_plan_data %&gt;% chart_annual_growth( base_year = CY(2011), flag_years = CY(1990)) PG&amp;E: Consumption by Sector PGE_gas_plan_data %&gt;% chart_annual_throughputs_by( fill = sector) PG&amp;E: Growth by Sector PGE_gas_plan_data %&gt;% chart_annual_growth_by( color = sector, base_year = CY(2011)) If we like, we can collapse these sectors into “Residential”, “Industrial/Commercial”, and “Other”. PGE_gas_plan_data %&gt;% mutate_at( vars(sector), ~ fct_collapse( ., &quot;Residential&quot; = &quot;Residential&quot;, &quot;Commercial/Industrial&quot; = c( &quot;Industry&quot;, &quot;Commercial Building&quot;, &quot;Commercial Other&quot;), other_level = &quot;Other&quot;)) %&gt;% chart_annual_growth_by( color = sector, base_year = CY(2011), flag_years = CY(1990)) This shows something different than the analysis by county. Residential consumption (MMthm). In this PGE_gas_plan_data, we see about 2 billion thm/yr. In the SFBA_gas_county_data, we only saw about 1 billion thm/yr. Either something is wrong, or these are estimates for different populations, and hence not perfectly comparable. Residential growth. In this PGE_gas_plan_data, we can see a strong long-term decline in Residential consumption — CY1990 was 65% higher than CY2011, so about -3% per year. That’s a full order of magnitude larger than the 0.3%/yr we saw in SFBA_gas_county_data. Commercial/Industrial consumption (MMthm). The amount of natural gas consumed by the Commercial and Industrial sectors, as reported in PGE_gas_plan_data, is almost twice as high as that labeled “Non-Residential” in SFBA_gas_county_data (3 billion vs 1.5 billion therms, respectively). Commercial/Industrial growth. Even though the two datasets don’t cover the same non-residential population, compared to the “Non-Residential” consumption in SFBA_gas_county_data, the long-term growth in the Commercial and Industrial sectors here looks similarly flat — a fraction of a percent per year. Recall that PGE_gas_plan_data comprises almost 5 billion therms, whereas SFBA_gas_county_data comprised only 3 billion. So, these differences might be reconcilable. There could be large populations of consumers covered by one that aren’t covered by the other. This section was intended to give you a sense of what you can do with third-party activity data. You can do very similar things, of course, with third-party emission data. The key is to have the expected variables in your dataset (tput_qty and tput_unit, and/or ems_qty and ems_unit). And, you can always fall back to the more generic chart_annual_quantities() and/or chart_annual_growth(), so long as your dataset has at least one variable ending in _qty. "],["11-discontinuities.html", "11 Changes in Methodology 11.1 Annotating Your Data with *_basis", " 11 Changes in Methodology “Changes in methodology” can be shown visually. Here, we do this for VMT data. In our dataset, vmt_basis is either “EMFAC2011” (for years CY1990-1999) or “EMFAC2017” (for years CY2000 onward). We use vmt_basis as the variable to color by. This introduces a visual break. # # NOTE: here we&#39;re omitting the usual titling and captioning ... just so that we # can see that `color = vmt_basis` is the key piece. # chart_data %&gt;% chart_annual_quantities_by( color = vmt_basis) The visual break is perhaps uncomfortable, but it is meaningful. It means that we don’t actually have an estimate of the year-over-year change between CY1999 and CY2000! The reader should not be able to see a downward-sloping segment between those two years, unless we have reason to believe that there actually was a decrease. 11.1 Annotating Your Data with *_basis This is assuming we already have our chart_data in tidy form. Suppose we have our data in this form, but without a *_basis column. show(head(SFBA_VMT_data)) ## # A tibble: 6 x 4 ## year vtype vmt_unit vmt_qty ## &lt;CY&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 CY1990 All vehicles VMT/yr 46633785580 ## 2 CY1990 Passenger vehicles VMT/yr 44241653360 ## 3 CY1990 Trucks VMT/yr 2014887248 ## 4 CY1991 All vehicles VMT/yr 47805484120 ## 5 CY1991 Passenger vehicles VMT/yr 45464314230 ## 6 CY1991 Trucks VMT/yr 1981000432 The key component is the vmt_basis column. For emission data, this might be ems_basis; for throughput data, it might be tput_basis. If you don’t already have this in your data, you can add it using a combination of (a) mutate() and (b) either if_else() or case_when(). # # Here is an example using `if_else()`. # chart_data &lt;- SFBA_VMT_data %&gt;% mutate( vmt_basis = if_else( year &lt; CY(2000), true = &quot;EMFAC2011&quot;, false = &quot;EMFAC2017&quot;, missing = &quot;Unknown&quot;)) # # Here is an example using `case_when()`. # chart_data &lt;- SFBA_VMT_data %&gt;% mutate( vmt_basis = case_when( year &lt; CY(2000) ~ &quot;EMFAC2011&quot;, year &gt;= CY(2000) ~ &quot;EMFAC2017&quot;, TRUE ~ &quot;Unknown&quot;)) "],["appendix.html", "A Advanced Usage A.1 Calculating county fractions from raw growth profile data B Special Cases B.1 Changes in forecasts for category #284 C Technical Documentation C.1 Control factors", " A Advanced Usage A.1 Calculating county fractions from raw growth profile data In the chapter on Growth profiles, things ended with a look at “raw” county-specific growth profile data for BY2011 category #761 “Sanitary Sewers”. And, we could see that the raw data looked a lot like population counts. This means that we can double-check the BY2011 county fractions, stored in file t1325, against fractions that we compute right here using the raw growth profile data. Sanitary Sewers example Let’s try this with our “Sanitary Sewers” example (which was linked to growth profile #657). # # Double-check the crosswalk. Category #761 &quot;Sanitary Sewers&quot; should be # associated with growth profile #657 &quot;Household Population&quot;. # BY(2011) %&gt;% DB_growth_profile_crosswalk() %&gt;% filter_categories( &quot;Sanitary Sewers&quot; = 761) %&gt;% ensure( .$gpf_id == 657) cat_id cat_h0 gpf_id backcast forecast category 761 Area Source 657 TRUE TRUE Sanitary Sewers # # Compute county fractions from the raw growth profile data. # # - Extract just the CY2011 values. # - Create a new column `cnty_frac`. # BY2011_raw_growth_profile_data %&gt;% filter( gpf_id == 657) %&gt;% filter_years( CY(2011)) %&gt;% mutate( cnty_frac = gf_qty / total(gf_qty)) gpf_from gpf_id year gf_qty cnty_abbr gpf_name gpf_staff gpf_date cnty_frac t0336 657 CY2011 1535560 ALA Household Population Minh H Nguyen 2010-02-25 0.2168986 t0336 657 CY2011 1086820 CC Household Population Minh H Nguyen 2010-02-25 0.1535139 t0336 657 CY2011 245700 MAR Household Population Minh H Nguyen 2010-02-25 0.0347053 t0336 657 CY2011 134080 NAP Household Population Minh H Nguyen 2010-02-25 0.0189389 t0336 657 CY2011 794560 SF Household Population Minh H Nguyen 2010-02-25 0.1122320 t0336 657 CY2011 728160 SM Household Population Minh H Nguyen 2010-02-25 0.1028530 t0336 657 CY2011 1815700 SNC Household Population Minh H Nguyen 2010-02-25 0.2564686 t0336 657 CY2011 309080 SOL Household Population Minh H Nguyen 2010-02-25 0.0436577 t0336 657 CY2011 429960 SON Household Population Minh H Nguyen 2010-02-25 0.0607321 In the new cnty_frac column, we can see percentages of 21.7%, 15.4%, 3.5%, 1.9%, 11.2%, 10.3%, 25.6%, 4.4%, and 6.1%, respectively. County fractions pulled from DataBank Now, let’s compare those to what’s stored in DataBank as “published” (file t1325, accessed via DB_county_fractions()). # # Pull the &quot;published&quot; county fractions for BY2011 (stored in `t1325`). # BY(2011) %&gt;% DB_county_fractions( verbose = TRUE) %&gt;% filter( cat_id == 761) year cat_id cnty_abbr cnty_frac BY2011 761 ALA 0.2185224 BY2011 761 CC 0.1331767 BY2011 761 MAR 0.0401685 BY2011 761 NAP 0.0188647 BY2011 761 SF 0.1298252 BY2011 761 SM 0.1096952 BY2011 761 SNC 0.2560921 BY2011 761 SOL 0.0394379 BY2011 761 SON 0.0542175 We can see some mismatches, but there could be good reasons for them. This is just intended to show you how you can do the double-checking. B Special Cases B.1 Changes in forecasts for category #284 You might have noticed that the throughput forecast, for category #284, doesn’t follow the same trajectory as the NOx forecast. This is not because NOx emission factors were projected to increase after CY2011. Here’s what happened: The BY2011 criteria-pollutant calculations were completed. The growth profile for this category, in DataBank, was updated. The BY2011 GHG calculations were completed. Here are some basic exercises (and charts) that may shed some light. # # This is the growth in NOx emissions from BY2011 category #284, via the # published inventory (`BY2011_annual_emission_data`). # BY2011_annual_emission_data %&gt;% filter_categories( &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_growth( base_year = CY(2011), flag_years = CY(2020)) # # This is the growth profile assigned to category #284 via file `t1325`. # It&#39;s not consistent with the published emission forecast (above). # BY2011_growth_profile_data %&gt;% filter_categories( &quot;#284 Water Heating&quot; = 284) %&gt;% chart_annual_growth( base_year = CY(2011), flag_years = CY(2020)) # # This is the growth in emissions, via the reproduced inventory. It&#39;s consistent # with the assigned growth profile, but not with the published forecast. # BY2011_area_source_projection_data %&gt;% filter_categories( &quot;#284 Water Heating&quot; = 284) %&gt;% filter_pollutants( &quot;NOx&quot;) %&gt;% chart_annual_growth( qty_var = &quot;ems_qty&quot;, base_year = CY(2011), flag_years = CY(2020)) # # This is the growth in throughputs, via the reproduced inventory. It&#39;s also # consistent with the assigned growth profile, and with the reproduced # emissions, but not with the published forecast. # BY2011_area_source_throughput_data %&gt;% filter_categories( &quot;#284 Water Heating&quot; = 284) %&gt;% chart_annual_growth( qty_var = &quot;tput_qty&quot;, # changed from &quot;ems_qty&quot; to &quot;tput_qty&quot; base_year = CY(2011), flag_years = CY(2020)) If it still doesn’t make sense, please feel free to raise a question at one of our meetings! C Technical Documentation C.1 Control factors Documentation for three key functions is printed out below. DB_control_factors() is a legacy-format API for DataBank (t0326). In its output, Cd, Ed, and Ep are key. See help(t0326) as well. annualize_DB_control_factors(), which itself depends on calculate_Fd_and_Fc(), implements the annualization algorithm mentioned in the chapter on Control factors. The References section of help(calculate_Fd_and_Fc) contains a reference to a PDF that describes the algorithm in several pages. help(DB_control_factors) DB_control_factors R Documentation DB_control_factors Description Retrieve control factors (keyed by category and date) for a given base year. You have two choices: DB_raw_control_factors(), for data organized in legacy format; or DB_control_factors(), for a tidier version of the same information. Usage of the latter is recommended. You will generally want to pipe its result through annualize_DB_control_factors() before (a) supplying it to BY_area_source_projections(), (b) charting it, or (c) combining it with other annual data. See the Details and Examples, below, as well as the documentation for the functions above. Usage DB_control_factors(base_year, na.rm = TRUE, verbose = getOption(\"verbose\")) DB_raw_control_factors(base_year, verbose = getOption(\"verbose\")) Arguments base_year see BY() na.rm drop records where Cd is zero (“uncontrolled”) verbose display informative messages Details IMPORTANT: cf_qty is the uncontrolled fraction, not the controlled fraction. You should multiply things by cf_qty, not (1 - cf_qty). In the data returned by DB_control_factors(), Cd is “the maximum percent emission reduction expected from all the changes in equipment, materials and operations due to the regulation.” In the data returned by DB_raw_control_factors(), the values PM through CO correspond to the same Cd for each controlled pollutant, respectively. (Same data, but in “wide”, rather than “long”, format.) They are also returned as percentages (between 0 and 100), rather than fractions (between 0.0 and 1.0). Value Tabular data, with the following columns: cat_id is the relevant (DataBank) category. pol_id (and pol_abbr) is the relevant pollutant. There may be more than one, for a given regulation. Ed is “Regulation Effectiveness. It represents the degree of compliance, in percent, for a given pollutant, or the degree to which the actual control approaches Cd.” Ep is “Previous Regulation Effectiveness, in percent (equals O if emissions previously uncontrolled).” cf_date is the effective date of the relevant regulation. cf_desc is a description or note entered by staff. reg_abbr is a more human-readable version of reg_id. reg_name is the full name of the relevant regulation. Functions DB_control_factors: provides data organized in “legacy format” (slightly tidier than t0326, with Cd pivoted by pol_abbr). DB_raw_control_factors: provides data in the same format as t0326. References See Tracking Emissions_Regulatory Control Levels_Effectiveness.pdf, located in the References/ subfolder of this package. See Also annualize_DB_control_factors() calculate_Fc_and_Fd() calculate_F_wt() calculate_F_avg() DB_CTLFAC_CONCORDANCE Examples DB_control_factor_data &lt;- BY(2011) %&gt;% DB_control_factors() DB_control_factor_data %&gt;% calculate_Fd_and_Fc() DB_control_factor_data %&gt;% annualize_DB_control_factors() help(annualize_DB_control_factors) annualize_DB_control_factors R Documentation Annualize control factors Description Convert “legacy style” control-factor data, such as that supplied by DB_control_factors(), into annualized uncontrolled fractions. Usage annualize_DB_control_factors( DB_control_factor_data, years = CY(1990:2050), na.rm = TRUE, verbose = getOption(\"verbose\") ) calculate_F_avg(Fc, F_wt) calculate_F_wt(yday, n_days = 365) Arguments DB_control_factor_data (tabular data) must have columns Cd, Ed, and Ep (see DB_control_factors()) years (CY) years for which output is desired; use CY(…) na.rm (logical) currently unused verbose (logical) display messages Functions calculate_F_avg: calculates F_avg as the mean of Fc, weighted by F_wt. calculate_F_wt: calculates F_wt as the fraction of the calendar year up until yday. See Also DB_control_factors() help(calculate_Fd_and_Fc) calculate_Fd R Documentation calculate_Fd_and_Fc Description Fd is \"the fraction of emissions remaining after the effect of a change in regulation control or its effectiveness. Fc is the cumulative product of Fd. Usage calculate_Fd(Cd, Ed, Ep) calculate_Fc(Fd) calculate_Fd_and_Fc(legacy_data, verbose = getOption(\"verbose\")) Functions calculate_Fd: calculates Fd from Cd, Ed, and Ep. calculate_Fc: calculates Fc as the cumulative product of Fd. Note DB_control_factors() depends on this function. References Mangat T., Nguyen M., and Schultz S. (1999) Tracking Emission Levels Using Regulatory Controls and Effectiveness Factors. (See References/ in this package.) See Also DB_control_factors() annualize_DB_control_factors() Examples legacy_data &lt;- BY(2011) %&gt;% DB_control_factors() legacy_data %&gt;% calculate_Fd_and_Fc() "]]
